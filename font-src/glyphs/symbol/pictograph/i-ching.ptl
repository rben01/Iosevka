$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from"../../../support/utils.mjs"
import [maskBit] from"../../../support/util/mask-bit.mjs"

glyph-module

glyph-block Symbol-Pictograph-I-Ching : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	create-glyph 'iChing/barYin' : glyph-proc
		local bar : AdviceStroke 3
		local gap : Math.max (Width / 8) [AdviceStroke 5]
		include : HBar.m SB (Middle - gap / 2 * HVContrast) 0 bar
		include : HBar.m (Middle + gap / 2 * HVContrast) RightSB 0 bar

	create-glyph 'iChing/barYang' : glyph-proc
		local bar : AdviceStroke 3
		include : HBar.m SB RightSB 0 bar

	define [patterns n su] : foreach [offset: range 0 [Math.pow 2 n]] : begin
		create-glyph ('iChing/Pattern/' + n + '/' + offset) (su + offset) : glyph-proc
			foreach [bit : range 0 n] : begin
				local offsetY : (2 / 3) * (OperBot - PictTop) / n
				local startY : SymbolMid - offsetY * (n - 1) / 2
				include : WithTransform [ApparentTranslate 0 (startY + offsetY * bit)]
					refer-glyph : if [not : maskBit offset bit] 'iChing/barYang' 'iChing/barYin'

	define [hexagramPatterns su order] : foreach [offset: range 0 64] : begin
		create-glyph ('iChing/Pattern/6/' + offset) (su + offset) : glyph-proc
			foreach [bit : range 0 6] : begin
				local offsetY : (PictBot - PictTop) / 6
				local startY : SymbolMid - offsetY * (6 - 1) / 2
				include : WithTransform [ApparentTranslate 0 (startY + offsetY * bit)]
					refer-glyph : if [not : maskBit order.(offset) bit] 'iChing/barYang' 'iChing/barYin'

	patterns 1 0x268A
	patterns 2 0x268C
	patterns 3 0x2630
	hexagramPatterns 0x4DC0 : list 0 63 29 46 5 40 47 61 4 8 7 56 16 2 55 59 25 38 15 60 26 22 62 31 24 6 30 33 45 18 49 35 48 3 58 23 20 10 53 43 14 28 1 32 57 39 41 37 17 34 27 54 52 11 19 50 36 9 44 13 12 51 21 42
